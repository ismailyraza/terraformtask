# Define the provider and AWS region
provider "aws" {
  region = "us-east-1" # Change this to your desired AWS region
}

# Create a VPC
resource "aws_vpc" "my_vpc" {
  cidr_block = "10.0.0.0/16" # Change this CIDR block to your desired value
}

# Create a public subnet
resource "aws_subnet" "public_subnet" {
  vpc_id                  = aws_vpc.my_vpc.id
  cidr_block              = "10.0.1.0/24" # Change this CIDR block to your desired value
  availability_zone       = "us-east-1a"  # Change this to your desired availability zone
  map_public_ip_on_launch = true
}

# Create a private subnet
resource "aws_subnet" "private_subnet" {
  vpc_id     = aws_vpc.my_vpc.id
  cidr_block = "10.0.2.0/24" # Change this CIDR block to your desired value
  availability_zone       = "us-east-1a"  # Change this to your desired availability zone
}

# Create a security group
resource "aws_security_group" "my_security_group" {
  name        = "my_security_group"
  description = "My Security Group"
  
  # Inbound rule for SSH
  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
  
  # Outbound rule for all traffic
  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

# Create an EC2 instance
resource "aws_instance" "my_instance" {
  ami           = "ami-0c55b159cbfafe1f0" # Replace with your desired AMI ID
  instance_type = "t2.micro"
  subnet_id     = aws_subnet.public_subnet.id
  
  # Define the root volume
  root_block_device {
    volume_size = 8
    volume_type = "gp2"
    delete_on_termination = true
  }
  
  tags = {
    Name    = "MyEC2Instance"
    purpose = "Assignment"
  }
}

# Output the public IP address of the EC2 instance
output "public_ip" {
  value = aws_instance.my_instance.public_ip
}
